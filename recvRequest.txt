void
AODV::recvRequest(Packet *p) {
struct hdr_ip *ih = HDR_IP(p);
struct hdr_aodv_request *rq = HDR_AODV_REQUEST(p);
// MODIFIED //
((MobileNode*) mNode)->getLoc(&posX,&posY);
rq->pt.nodes_position_x[index] = this->posX;
rq->pt.nodes_position_y[index] = this->posY;
rq->pt.nodes_timestamp[index] = CURRENT_TIME;
for(int i=0;i<NUMBER_OF_NODE;i++)
{
if(this->pt.nodes_timestamp[i] < rq->pt.nodes_timestamp[i])
{
this->pt.nodes_position_x[i] = rq->pt.nodes_position_x[i];
this->pt.nodes_position_y[i] = rq->pt.nodes_position_y[i];
this->pt.nodes_timestamp[i] = rq->pt.nodes_timestamp[i];
}
else if(this->pt.nodes_timestamp[i] > rq->pt.nodes_timestamp[i])
{
rq->pt.nodes_position_x[i] = this->pt.nodes_position_x[i];
rq->pt.nodes_position_y[i] = this->pt.nodes_position_y[i];
rq->pt.nodes_timestamp[i] = this->pt.nodes_timestamp[i];
}
}
// MODIFIED //
aodv_rt_entry *rt;
// MODIFIED //
//SIGNAL
double receiveSignalStrength = p->txinfo_.RxPr;
double RSSM;
if(receiveSignalStrength == 0)
{
RSSM = -200;
}
else
{
RSSM = 10*log10(receiveSignalStrength) + 30;
}
if(SIGNAL_THRESHOLD >= RSSM)
{
Packet::free((Packet *)p);
return;
}
//CONGESTION
int queueLength = rqueue.queueLength(index);
if(queueLength == 0)
{
queueLength = 1;
}
//ENERGY
energy = mNode->energy_model()->energy();
if(ENERGY_THRESHOLD >= energy)
{
Packet::free(p);
return;
}
//HOPCOUNT
int hopCount = rq->rq_hop_count;
//PHEROMONE COUNT
double pheromoneCount = ((RSSM+91)*energy)/(queueLength * hopCount);
if(rq->pheromoneCount != NULL)
{
lastPheromoneCount = rq->pheromoneCount + pheromoneCount;
}
else
{
lastPheromoneCount = pheromoneCount;
}
rq->pheromoneCount = lastPheromoneCount;
// MODIFIED //
/*
* Drop if:
* - I'm the source
* - I recently heard this request.
*/
if(rq->rq_src == index) {
#ifdef DEBUG
fprintf(stderr, "%s: got my own REQUEST\n", __FUNCTION__);
#endif // DEBUG
Packet::free(p);
return;
}
if (id_lookup(rq->rq_src, rq->rq_bcast_id)) {
#ifdef DEBUG
fprintf(stderr, "%s: discarding request\n", __FUNCTION__);
#endif // DEBUG
Packet::free(p);
return;
}
/*
* Cache the broadcast ID
*/
id_insert(rq->rq_src, rq->rq_bcast_id);
/*
* We are either going to forward the REQUEST or generate a
* REPLY. Before we do anything, we make sure that the REVERSE
* route is in the route table.
*/
aodv_rt_entry *rt0; // rt0 is the reverse route
rt0 = rtable.rt_lookup(rq->rq_src);
if(rt0 == 0) { /* if not in the route table */
// create an entry for the reverse route.
rt0 = rtable.rt_add(rq->rq_src);
}
rt0->rt_expire = max(rt0->rt_expire, (CURRENT_TIME + REV_ROUTE_LIFE));
if ( (rq->rq_src_seqno > rt0->rt_seqno ) ||
((rq->rq_src_seqno == rt0->rt_seqno) &&
(rq->rq_hop_count < rt0->rt_hops)) ) {
// If we have a fresher seq no. or lesser #hops for the
// same seq no., update the rt entry. Else don't bother.
rt_update(rt0, rq->rq_src_seqno, rq->rq_hop_count, ih->saddr(), rq->pheromoneCount,
max(rt0->rt_expire, (CURRENT_TIME + REV_ROUTE_LIFE)) );
if (rt0->rt_req_timeout > 0.0) {
// Reset the soft state and
// Set expiry time to CURRENT_TIME + ACTIVE_ROUTE_TIMEOUT
// This is because route is used in the forward direction,
// but only sources get benefited by this change
rt0->rt_req_cnt = 0;
rt0->rt_req_timeout = 0.0;
rt0->rt_req_last_ttl = rq->rq_hop_count;
rt0->rt_expire = CURRENT_TIME + ACTIVE_ROUTE_TIMEOUT;
}
/* Find out whether any buffered packet can benefit from the
* reverse route.
* May need some change in the following code - Mahesh 09/11/99
*/
assert (rt0->rt_flags == RTF_UP);
Packet *buffered_pkt;
while ((buffered_pkt = rqueue.deque(rt0->rt_dst))) {
if (rt0 && (rt0->rt_flags == RTF_UP)) {
assert(rt0->rt_hops != INFINITY2);
forward(rt0, buffered_pkt, NO_DELAY);
}
}
}
// End for putting reverse route in rt table
// MODIFIED //
if(lastPheromoneCount != NULL)
{
rt0->pheromoneCount = lastPheromoneCount;
}
// MODIFIED //
/*
* We have taken care of the reverse route stuff.
* Now see whether we can send a route reply.
*/
rt = rtable.rt_lookup(rq->rq_dst);
// First check if I am the destination ..
if(rq->rq_dst == index) {
printf("\nSAMPAI DI DESTINATION -> %d Time : %f",index,CURRENT_TIME);
#ifdef DEBUG
fprintf(stderr, "%d - %s: destination sending reply\n",
index, __FUNCTION__);
#endif // DEBUG
// Just to be safe, I use the max. Somebody may have
// incremented the dst seqno.
seqno = max(seqno, rq->rq_dst_seqno)+1;
if (seqno%2) seqno++;
sendReply(rq->rq_src, // IP Destination
1, // Hop Count
index, // Dest IP Address
seqno, // Dest Sequence Num
MY_ROUTE_TIMEOUT, // Lifetime
rq->rq_timestamp); // timestamp
Packet::free(p);
}
// I am not the destination, but I may have a fresh enough route.
else if (rt && (rt->rt_hops != INFINITY2) &&
(rt->rt_seqno >= rq->rq_dst_seqno) ) {
//assert (rt->rt_flags == RTF_UP);
assert(rq->rq_dst == rt->rt_dst);
//assert ((rt->rt_seqno%2) == 0); // is the seqno even?
if (rq->rq_timestamp == NULL) rq->rq_timestamp = CURRENT_TIME;
sendReply(rq->rq_src,
rt->rt_hops + 1,
rq->rq_dst,
rt->rt_seqno,
(u_int32_t) (rt->rt_expire - CURRENT_TIME),
// rt->rt_expire - CURRENT_TIME,
rq->rq_timestamp);
// Insert nexthops to RREQ source and RREQ destination in the
// precursor lists of destination and source respectively
rt->pc_insert(rt0->rt_nexthop); // nexthop to RREQ source
rt0->pc_insert(rt->rt_nexthop); // nexthop to RREQ destination
#ifdef RREQ_GRAT_RREP
sendReply(rq->rq_dst,
rq->rq_hop_count,
rq->rq_src,
rq->rq_src_seqno,
(u_int32_t) (rt->rt_expire - CURRENT_TIME),
// rt->rt_expire - CURRENT_TIME,
rq->rq_timestamp);
#endif
// TODO: send grat RREP to dst if G flag set in RREQ using rq->rq_src_seqno, rq->rq_hop_counT
// DONE: Included gratuitous replies to be sent as per IETF aodv draft specification. As of now, G flag has not been dynamically used and is always set or reset in aodv-packet.h --- Anant Utgikar, 09/16/02.
Packet::free(p);
}
/*
* Can't reply. So forward the Route Request
*/
else {
ih->saddr() = index;
ih->daddr() = IP_BROADCAST;
rq->rq_hop_count += 1;
// Maximum sequence number seen en route
if (rt) rq->rq_dst_seqno = max(rt->rt_seqno, rq->rq_dst_seqno);
// MODIFIED //
if(!isClusterHead)
{
Packet::free(p);
return;
}
// MODIFIED //
forward((aodv_rt_entry*) 0, p, DELAY);
}
}